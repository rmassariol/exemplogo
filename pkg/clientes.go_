// package main


// import (
// 	"fmt"  
// 	"net/http"

// )


// func helloWord(w http.ResponseWriter, r *http.Request){
// 	fmt.Fprintf(w,"chamou o hello word")
// }

package main


import (
	"fmt"
	"net/http"
	"github.com/jinzhu/gorm"
	"github.com/jinzhu/gorm/dialects/sqlite"
  )

var db *gorm.DB
var err error

// Our User Struct
type User struct {
    gorm.Model
    Name  string
    Email string
    CidadeID    
}

func InitialMigration(){
	db, err = gorm.Open("sqlite3","test.db")
	if err != nil {
		fmt.Println(err.Error()
		panic("Falha ao conectar banco!")
	}
	defer db.Close()

	db.AutoMigrate(&User{})
}

func allUsers(w http.ResponseWriter, r *http.Request) {
    db, err := gorm.Open("sqlite3", "test.db")
    if err != nil {
        panic("failed to connect database")
    }
    defer db.Close()

    var users []User
    db.Find(&users)
    fmt.Println("{}", users)

    json.NewEncoder(w).Encode(users)
}

// func newUser(w http.ResponseWriter, r *http.Request) {
//     fmt.Fprintf(w, "New User Endpoint Hit")
// }

// func deleteUser(w http.ResponseWriter, r *http.Request) {
//     fmt.Fprintf(w, "Delete User Endpoint Hit")
// }

// func updateUser(w http.ResponseWriter, r *http.Request) {
//     fmt.Fprintf(w, "Update User Endpoint Hit")
// }
